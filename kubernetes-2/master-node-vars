---
- name: master install kubeadm 
  hosts: ${master_public_ip}
  become: yes  
  tasks:
  - name: update apt repo & cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600 upgrade=dist
  - name: making some alias
    ansible.builtin.blockinfile:
      path: /etc/bash.bashrc
      block: |
        alias c=clear
        alias k=kubectl    
  - name: Set a hostname
    ansible.builtin.hostname:
      name: master
  - name: configure dns names for the cluster nodes locally
    ansible.builtin.blockinfile:
      path: /etc/hosts
      block: |
        ${master_private_ip}     master
        ${worker1_private_ip}    worker1
        ${worker2_private_ip}    worker2

- name: master_install_kubeadm 
  hosts: ${master_public_ip}
  become: yes
  become_user: root
  gather_facts: no   
  tasks:
  # - name: Copy install-containerd.sh file 
  #   copy:
  #     src: /home/ahmed/Desktop/terraform/kubernetes-cluster/kubernetes/install-containerd.sh
  #     dest: /home/ubuntu/install-containerd.sh
  #     mode: +x
  # - name: Copy install-kubeadm.sh file
  #   copy:
  #     src: /home/ahmed/Desktop/terraform/kubernetes-cluster/kubernetes/install-kubeadm.sh
  #     dest: /home/ubuntu/install-kubeadm.sh
  #     mode: +x
  # - name: run script install-containerd.sh
  #   ansible.builtin.command: 
  #     cmd:  /home/ubuntu/install-containerd.sh
  # - name: run script install-kubeadm.sh
  #   ansible.builtin.command: 
  #     cmd:  /home/ubuntu/install-kubeadm.sh    
  # - name: update apt repo & cache
  #   apt: update_cache=yes force_apt_get=yes cache_valid_time=0 upgrade=dist
  - name: Install a list of packages
    ansible.builtin.apt:
      update_cache: true
      pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
  - name: disable swap
    ansible.builtin.command:
      cmd:  swapoff -a
  - name: configure k8s prerequist modules
    ansible.builtin.lineinfile:
      path: /etc/modules-load.d/k8s.conf
      line: "{{ item }}"
      create: yes      
    loop: 
    - overlay
    - br_netfilter
    register: k8s_prerequists_state

  # - name: configurer k8s prerequists
  #   ansible.builtin.blockinfile:
  #     path: /etc/modules-load.d/k8s.conf
  #     block: |
  #       overlay
  #       br_netfilter
  #     create: true
  # - name: removing ansible marker from /etc/modules-load.d/k8s.conf
  #   ansible.builtin.lineinfile:
  #     path: /etc/modules-load.d/k8s.conf
  #     state: absent
  #     regexp: 'ANSIBLE'

  - name: k8s prerequists commands
    ansible.builtin.command:
      cmd: "{{ item }}"
    loop:
    - sudo modprobe overlay
    - sudo modprobe br_netfilter  
    when: k8s_prerequists_state.changed == true
       
  - name: configure file /etc/sysctl.d/k8s.conf
    ansible.builtin.lineinfile:
      path: /etc/sysctl.d/k8s.conf
      line: "{{ item }}"
      create: yes      
    loop: 
    - net.bridge.bridge-nf-call-iptables  = 1
    - net.bridge.bridge-nf-call-ip6tables = 1
    - net.ipv4.ip_forward                 = 1
    register: sysctl_file_state
    # notify: 
    # - reload sysctl

  - name: reload sysctl
    ansible.builtin.command:
      cmd:  sysctl --system
    when: sysctl_file_state.changed == true

  - name: Install containerd
    ansible.builtin.apt:
      pkg:
      - containerd
      update_cache: yes
  - name: start & enable containerd.service
    systemd:
      name: containerd
      state: started
      enabled: true           

  - name: copy containerd config defaults into a register
    ansible.builtin.command:
      cmd: containerd config default 
    register: cmd_result
    when: k8s_prerequists_state.changed == true
  - name: configure file /etc/containerd/config.toml
    ansible.builtin.blockinfile:
      path: /etc/containerd/config.toml
      block: |
        {{ cmd_result.stdout }}
      create: true      
    when: k8s_prerequists_state.changed == true
  - name: removing ansible marker from /etc/containerd/config.toml
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      state: absent
      regexp: 'ANSIBLE'
    when: k8s_prerequists_state.changed == true    

  # - name: Ensure /etc/containerd file exists
  #   ansible.builtin.file:
  #     path: /etc/containerd
  #     state: directory
  # - name: configure containerd config file by shell module
  #   ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
  #   when: k8s_prerequists_state.changed == true  
    
  # - name: configure Cgroup in containerd config file 
  #   ansible.builtin.command:
  #     cmd: sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
  - name: configure Cgroup in containerd config file 
    lineinfile: 
      path: /etc/containerd/config.toml
      regexp: '^            SystemdCgroup = '
      line: '            SystemdCgroup = true'
    when: k8s_prerequists_state.changed == true      

  - name: restart containerd
    systemd:
      name: containerd
      state: restarted      
    when: k8s_prerequists_state.changed == true

  # - name: Check if file /etc/apt/keyrings/kubernetes-apt-keyring.gpg exists
  #   stat:
  #     path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  #   register: stat_result
  # - debug:
  #     var: stat_result.stat.exists
  # ############### there is no redirection man the "shell" module contain redirectoin man ################################## 
  # - name: Add k8s key
  #   ansible.builtin.shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  #   when: not stat_result.stat.exists
  # # - name: add k8s repo
  # #   ansible.builtin.command:
  # #     cmd: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
  # - name: configure file /etc/apt/sources.list.d/kubernetes.list
  #   ansible.builtin.blockinfile:
  #     path: /etc/apt/sources.list.d/kubernetes.list
  #     block: |
  #       deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
  #     create: true


  - name: Add Kubernetes apt key.
    apt_key:
      url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key    
      state: present
    register: add_repository_key
    # ignore_errors: "{{ kubernetes_apt_ignore_key_error }}"

  - name: Add Kubernetes repository.
    apt_repository:
      repo: "deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
      state: present
      update_cache: true

  - name: Check if file /etc/kubernetes/admin.conf exists
    stat:
      path: /etc/kubernetes/admin.conf 
    register: kube_init_stat
  - debug:
      var: kube_init_stat.stat.exists

  # - name: update apt repo & cache
  #   apt:
  #     update_cache: yes
  - name: Install kubeadm
    ansible.builtin.apt:
      # update_cache: yes
      pkg:
        - kubelet=1.28.2-1.1
        - kubeadm=1.28.2-1.1
        - kubectl=1.28.2-1.1
      allow_downgrade: true
    when: not kube_init_stat.stat.exists  

  - name: kubeadm init
    become: yes
    become_user: root
    ansible.builtin.command: 
      cmd: kubeadm init
    when: not kube_init_stat.stat.exists    

  - name: Create /home/ubuntu/.kube directory if it does not exist
    ansible.builtin.file:
      path: /home/ubuntu/.kube
      state: directory
  - name: Copy kubeconfig file 
    become: yes
    become_user: root
    copy:
      src: /etc/kubernetes/admin.conf 
      dest: /home/ubuntu/.kube/config
      remote_src: true
  - name: change ownership of kubeconfig file
    ansible.builtin.file:      
      path: /home/ubuntu/.kube/config
      state: file
      owner: ubuntu
      group: ubuntu         
      mode: "0600"   
  - name: generate token for worker nodes to join
    ansible.builtin.command: 
      cmd: kubeadm token create --print-join-command
    register: kubeadm_command_output
  # - name: output the register variable value
  #   debug: msg="the kubeadm_command_output.stdout register =  {{kubeadm_command_output.stdout}}"
  - name: output the register variable value by hosts
    debug:
      var:  hostvars['${master_public_ip}']['kubeadm_command_output']['stdout']
  - name: deploy weave cni
    become: yes
    become_user: ubuntu
    ansible.builtin.command: 
      cmd: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
    changed_when: false

  # - name: Add an helm Apt signing key to a specific keyring file
  #   ansible.builtin.apt_key:
  #     url: https://baltocdn.com/helm/signing.asc  
  #     keyring: /usr/share/keyrings/helm.gpg

  # - name: Add helm repository.
  #   apt_repository:
  #     repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
  #     state: present
  #     update_cache: true

  # - name: Add helm key && repo
  #   block:
  #     - name: Add helm key
  #       ansible.builtin.get_url:
  #         url: https://baltocdn.com/helm/signing.asc
  #         dest: /usr/share/keyrings/helm.gpg

  #     - name: Add helm repo
  #       ansible.builtin.apt_repository:
  #         repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
  #         state: present
  #         update_cache: true

  - name: Add Helm apt key.
    apt_key:
      url: https://baltocdn.com/helm/signing.asc   
      state: present
    register: add_helm_repository_key

  - name: Add helm repository.
    apt_repository:
      repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
      state: present
      update_cache: true

  - name: Install helm
    ansible.builtin.apt:
      pkg:
      - helm
    register: helm_install_stat

  - name: Deploy ingress-nginx repo 
    become: yes
    become_user: ubuntu    
    ansible.builtin.command:
      cmd: "{{ item }}"
    loop:
    - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    - helm repo update  
    # - helm install my-nginx-controller ingress-nginx/ingress-nginx
    # when: helm_install_stat.changed == true      


  # handlers:
  # - name: reload sysctl
  #   ansible.builtin.command:
  #     cmd:  sysctl --system
  # - name: restart containerd
  #   systemd:
  #     name: containerd
  #     state: restarted      


- name: worker1 instaall kubeadm 
  hosts: ${worker1_public_ip}
  become: yes  
  tasks:
  - name: update apt repo & cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600 upgrade=dist
  - name: making some alias
    ansible.builtin.blockinfile:
      path: /etc/bash.bashrc
      block: |
        alias c=clear
        alias k=kubectl    
  - name: Set a hostname
    ansible.builtin.hostname:
      name: worker1
  - name: making some alias
    ansible.builtin.blockinfile:
      path: /etc/hosts
      block: |
        ${master_private_ip}     master
        ${worker1_private_ip}    worker1
        ${worker2_private_ip}    worker2

- name: instaall kubeadm 
  hosts: ${worker1_public_ip}    
  become: yes
  become_user: root      
  tasks:
  # - name: Copy install-containerd.sh file 
  #   copy:
  #     src: /home/ahmed/Desktop/terraform/kubernetes-cluster/kubernetes/install-containerd.sh
  #     dest: /home/ubuntu/install-containerd.sh
  #     mode: +x
  # - name: Copy install-kubeadm.sh file
  #   copy:
  #     src: /home/ahmed/Desktop/terraform/kubernetes-cluster/kubernetes/install-kubeadm.sh
  #     dest: /home/ubuntu/install-kubeadm.sh
  #     mode: +x
  # - name: run script install-containerd.sh
  #   ansible.builtin.command: 
  #     cmd:  /home/ubuntu/install-containerd.sh
  # - name: run script install-kubeadm.sh
  #   ansible.builtin.command: 
  #     cmd:  /home/ubuntu/install-kubeadm.sh

  # - name: play-1update apt repo & cache
  #   apt: update_cache=yes force_apt_get=yes cache_valid_time=0 upgrade=dist
  # - name: Install a list of packages
  #   ansible.builtin.apt:
  #     pkg:
  #     - apt-transport-https
  #     - ca-certificates
  #     - curl
  # - name: disable swap
  #   ansible.builtin.command:
  #     cmd:  swapoff -a
  # - name: configurer k8s prerequists
  #   ansible.builtin.blockinfile:
  #     path: /etc/modules-load.d/k8s.conf
  #     block: |
  #       overlay
  #       br_netfilter
  #     create: true
  # - name: k8s prerequists continue
  #   ansible.builtin.command:
  #     cmd: sudo modprobe overlay
  # - name: k8s prerequists continue
  #   ansible.builtin.command:
  #     cmd: sudo modprobe br_netfilter        
  # - name: configure file /etc/sysctl.d/k8s.conf
  #   ansible.builtin.blockinfile:
  #     path: /etc/sysctl.d/k8s.conf
  #     block: |
  #       net.bridge.bridge-nf-call-iptables  = 1
  #       net.bridge.bridge-nf-call-ip6tables = 1
  #       net.ipv4.ip_forward                 = 1
  #     create: true
  #     marker: no
  # - name: reload sysctl
  #   ansible.builtin.command:
  #     cmd:  sysctl --system
  # - name: Install containerd
  #   ansible.builtin.apt:
  #     pkg:
  #     - containerd
  #     update_cache: yes
  # - name: start & enable containerd.service
  #   systemd:
  #     name: containerd
  #     state: started
  # - name: configure containerd config file
  #   ansible.builtin.command:
  #     cmd: containerd config default > /etc/containerd/config.toml
  #   register: cmd_result
  # - debug:
  #     msg: "this is the out of cmd_result register: {{ cmd_result }}"
  # - name: configure file /etc/containerd/config.toml
  #   ansible.builtin.blockinfile:
  #     path: /etc/containerd/config.toml
  #     block: |
  #       {{ cmd_result.stdout }}
  #     create: true      
  # - name: configure containerd config file
  #   ansible.builtin.command:
  #     cmd: sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
  # - name: restart containerd.service
  #   systemd:
  #     name: containerd
  #     state: restarted      
  # - name: Check if file /etc/apt/keyrings/kubernetes-apt-keyring.gpg exists
  #   stat:
  #     path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  #   register: stat_result
  # - debug: msg={{stat_result}}
  # - name: Execute the command in remote shell; stdout goes to the specified file on the remote
  #   ansible.builtin.shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  #   when: not stat_result.stat.exists
  # # - name: add k8s repo
  # #   ansible.builtin.command:
  # #     cmd: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
  # - name: configure file /etc/apt/sources.list.d/kubernetes.list
  #   ansible.builtin.blockinfile:
  #     path: /etc/apt/sources.list.d/kubernetes.list
  #     block: |
  #       deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
  #     create: true
  # - name: update apt repo & cache
  #   apt:
  #     update_cache: yes
  # - name: Install kubeadm
  #   ansible.builtin.apt:
  #     update_cache: yes
  #     pkg:
  #       - kubelet=1.28.2-1.1
  #       - kubeadm=1.28.2-1.1
  #       - kubectl=1.28.2-1.1
  #     allow_downgrade: true

  # - name: update apt repo & cache
  #   apt: update_cache=yes force_apt_get=yes cache_valid_time=0 upgrade=dist
  - name: Install a list of packages
    ansible.builtin.apt:
      update_cache: true
      pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
  - name: disable swap
    ansible.builtin.command:
      cmd:  swapoff -a
  - name: configure k8s prerequists
    ansible.builtin.lineinfile:
      path: /etc/modules-load.d/k8s.conf
      line: "{{ item }}"
      create: yes      
    loop: 
    - overlay
    - br_netfilter
    register: k8s_prerequists_state

  - name: k8s prerequists 
    ansible.builtin.command:
      cmd: sudo modprobe overlay
    when: k8s_prerequists_state.changed == true
  - name: k8s prerequists continue
    ansible.builtin.command:
      cmd: sudo modprobe br_netfilter  
    when: k8s_prerequists_state.changed == true            

  - name: configure file /etc/sysctl.d/k8s.conf
    ansible.builtin.lineinfile:
      path: /etc/sysctl.d/k8s.conf
      line: "{{ item }}"
      create: yes      
    loop: 
    - net.bridge.bridge-nf-call-iptables  = 1
    - net.bridge.bridge-nf-call-ip6tables = 1
    - net.ipv4.ip_forward                 = 1
    register: sysctl_file_state
    # notify: 
    # - reload sysctl

  - name: reload sysctl
    ansible.builtin.command:
      cmd:  sysctl --system
    when: sysctl_file_state.changed == true

  - name: Install containerd
    ansible.builtin.apt:
      pkg:
      - containerd
      update_cache: yes
  - name: start & enable containerd.service
    systemd:
      name: containerd
      state: started
      enabled: true           
  - name: configure containerd config file
    ansible.builtin.command:
      cmd: containerd config default 
    register: cmd_result
  - name: configure file /etc/containerd/config.toml
    ansible.builtin.blockinfile:
      path: /etc/containerd/config.toml
      block: |
        {{ cmd_result.stdout }}
      create: true      
    when: k8s_prerequists_state.changed == true      
    # notify:
    # - restart containerd  

  - name: configure containerd config file 
    lineinfile: 
      path: /etc/containerd/config.toml
      regexp: '^            SystemdCgroup = '
      line: '            SystemdCgroup = true'
    when: k8s_prerequists_state.changed == true      
    # notify:
    # - restart containerd  

  - name: removing ansible marker from /etc/containerd/config.toml
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      state: absent
      regexp: 'ANSIBLE'
    when: k8s_prerequists_state.changed == true

  - name: restart containerd
    systemd:
      name: containerd
      state: restarted      
    when: k8s_prerequists_state.changed == true

  - name: Check if file /etc/apt/keyrings/kubernetes-apt-keyring.gpg exists
    stat:
      path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    register: stat_result
  - debug: 
      var: stat_result.stat.exists
  - name: Add k8s key
    ansible.builtin.shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    when: not stat_result.stat.exists
  # - name: add k8s repo
  #   ansible.builtin.command:
  #     cmd: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
  - name: configure file /etc/apt/sources.list.d/kubernetes.list
    ansible.builtin.blockinfile:
      path: /etc/apt/sources.list.d/kubernetes.list
      block: |
        deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
      create: true

  - name: Check if file /etc/kubernetes/pki/ca.crt exists
    stat:
      path: /etc/kubernetes/pki/ca.crt 
    register: kube_join_stat
  - debug: 
      var: kube_join_stat.stat.exists

  - name: update apt repo & cache
    apt:
      update_cache: yes
  - name: Install kubeadm
    ansible.builtin.apt:
      update_cache: yes
      pkg:
        - kubelet=1.28.2-1.1
        - kubeadm=1.28.2-1.1
        - kubectl=1.28.2-1.1
      allow_downgrade: true

  - name: output the register variable value
    debug:
      var:  hostvars['${master_public_ip}']['kubeadm_command_output']['stdout']      
  - name: output the register variable value
    debug:
      var:  hostvars['master_instaall_kubeadm']['kubeadm_command_output']['stdout']
  - name: kubeadm join 
    ansible.builtin.command: 
      cmd: "{{hostvars['${master_public_ip}']['kubeadm_command_output']['stdout']}}"      
    when: 
    - not kube_join_stat.stat.exists                       
    # - not hostvars['${master_public_ip}']['kube_init_stat']['stat']['exists']


- name: worker2 instaall kubeadm 
  hosts: ${worker2_public_ip}
  become: yes  
  tasks:
  - name: update apt repo & cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600 upgrade=dist
  - name: making some alias
    ansible.builtin.blockinfile:
      path: /etc/bash.bashrc
      block: |
        alias c=clear
        alias k=kubectl    
  - name: Set a hostname
    ansible.builtin.hostname:
      name: worker2
  - name: configure dns names for the cluster nodes locally
    ansible.builtin.blockinfile:
      path: /etc/hosts
      block: |
        ${master_private_ip}     master
        ${worker1_private_ip}    worker1
        ${worker2_private_ip}    worker2

- name: instaall kubeadm 
  hosts: ${worker2_public_ip}    
  become: yes
  become_user: root      
  tasks:
  - name: update apt repo & cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=0 upgrade=dist
  - name: Install a list of packages
    ansible.builtin.apt:
      pkg:
      - apt-transport-https
      - ca-certificates
      - curl
  - name: disable swap
    ansible.builtin.command:
      cmd:  swapoff -a
  - name: configure k8s prerequists
    ansible.builtin.lineinfile:
      path: /etc/modules-load.d/k8s.conf
      line: "{{ item }}"
      create: yes      
    loop: 
    - overlay
    - br_netfilter
    register: k8s_prerequists_state

  - name: k8s prerequists continue
    ansible.builtin.command:
      cmd: sudo modprobe overlay
    when: k8s_prerequists_state.changed == true
  - name: k8s prerequists continue
    ansible.builtin.command:
      cmd: sudo modprobe br_netfilter  
    when: k8s_prerequists_state.changed == true            

  - name: configure file /etc/sysctl.d/k8s.conf
    ansible.builtin.lineinfile:
      path: /etc/sysctl.d/k8s.conf
      line: "{{ item }}"
      create: yes      
    loop: 
    - net.bridge.bridge-nf-call-iptables  = 1
    - net.bridge.bridge-nf-call-ip6tables = 1
    - net.ipv4.ip_forward                 = 1
    register: sysctl_file_state
    # notify: 
    # - reload sysctl

  - name: reload sysctl
    ansible.builtin.command:
      cmd:  sysctl --system
    when: sysctl_file_state.changed == true

  - name: Install containerd
    ansible.builtin.apt:
      pkg:
      - containerd
      update_cache: yes
  - name: start & enable containerd.service
    systemd:
      name: containerd
      state: started
      enabled: true           
  - name: configure containerd config file
    ansible.builtin.command:
      cmd: containerd config default 
    register: cmd_result

  - name: configure file /etc/containerd/config.toml
    ansible.builtin.blockinfile:
      path: /etc/containerd/config.toml
      block: |
        {{ cmd_result.stdout }}
      create: true      
    when: k8s_prerequists_state.changed == true      
    # notify:
    # - restart containerd  

  - name: configure containerd config file 
    lineinfile: 
      path: /etc/containerd/config.toml
      regexp: '^            SystemdCgroup = '
      line: '            SystemdCgroup = true'
    when: k8s_prerequists_state.changed == true      
    # notify:
    # - restart containerd  

  - name: removing ansible marker from /etc/containerd/config.toml
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      state: absent
      regexp: 'ANSIBLE'
    when: k8s_prerequists_state.changed == true

  - name: restart containerd
    systemd:
      name: containerd
      state: restarted      
    when: k8s_prerequists_state.changed == true

  - name: Check if file /etc/apt/keyrings/kubernetes-apt-keyring.gpg exists
    stat:
      path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    register: stat_result
  - debug:
      var: stat_result.stat.exists
  - name: Add k8s key
    ansible.builtin.shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    when: not stat_result.stat.exists
  # - name: add k8s repo
  #   ansible.builtin.command:
  #     cmd: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
  - name: configure file /etc/apt/sources.list.d/kubernetes.list
    ansible.builtin.blockinfile:
      path: /etc/apt/sources.list.d/kubernetes.list
      block: |
        deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
      create: true

  # - name: Check if file /etc/kubernetes/admin.conf exists
  #   stat:
  #     path: /etc/kubernetes/admin.conf 
  #   register: kube_init_stat
  # - debug: msg={{kube_init_stat}}

  - name: update apt repo & cache
    apt:
      update_cache: yes
  - name: Install kubeadm
    ansible.builtin.apt:
      update_cache: yes
      pkg:
        - kubelet=1.28.2-1.1
        - kubeadm=1.28.2-1.1
        - kubectl=1.28.2-1.1
      allow_downgrade: true

  - name: output the register variable value
    debug:
      var:  hostvars['${master_public_ip}']['kubeadm_command_output']['stdout']      
  - name: output the register variable value
    debug:
      var:  hostvars['master_instaall_kubeadm']['kubeadm_command_output']['stdout']
  - name: kubeadm join 
    ansible.builtin.command: 
      cmd: "{{hostvars['${master_public_ip}']['kubeadm_command_output']['stdout']}}"      
    when: k8s_prerequists_state.changed == true                        



- name: master Deploy ingress nginx 
  hosts: ${master_public_ip}
  become: yes  
  become_user: ubuntu
  tasks:
  - name: copy helm value file
    copy:
      src: values.yaml
      dest: /home/ubuntu/myvalues.yaml
  - name: Deploy ingress-nginx repo    
    ansible.builtin.command:
      cmd: helm install my-nginx-controller ingress-nginx/ingress-nginx -f /home/ubuntu/myvalues.yaml
   

  # - name: output the register variable value
  #   debug:
  #     var:  hostvars['13.50.110.214']['kubeadm_command_output']['stdout']
  
  # ansible-inventory --list
